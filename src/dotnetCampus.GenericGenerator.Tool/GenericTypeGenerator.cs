using System;
using System.Linq;
using System.Reflection;

#pragma warning restore MA0074 // Avoid implicit culture-sensitive methods

namespace dotnetCampus.Runtime.CompilerServices
{
    internal class GenericTypeGenerator
    {
        private const string ToolName = "dotnetCampus.GenericGenerator";
        private static readonly string ToolVersion = Assembly.GetExecutingAssembly().GetCustomAttribute<AssemblyVersionAttribute>()?.Version ?? "0.0.0";

        private static readonly string GeneratedHeader =
$@"//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:{Environment.Version}
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#define GENERATED_CODE
";

        private static readonly string GeneratedFooter =
            $@"";

        private static readonly string Generatedattribute =
            $"[System.CodeDom.Compiler.GeneratedCode(\"{ToolName}\", \"{ToolVersion}\")]";

        private readonly string _genericTemplate;

        public GenericTypeGenerator(string genericTemplate)
        {
            _genericTemplate = genericTemplate;
        }

        public string Generate(int genericCount)
        {
#pragma warning disable MA0074 // Avoid implicit culture-sensitive methods
            var content = _genericTemplate
                // 替换泛型。
                .Replace("{ForT(t)}", FromTemplate("{0}", "{ForT(t{n})}", ", ", genericCount))
                .Replace("ForT(t)", FromTemplate("{0}", "ForT(t{n})", ", ", genericCount))
                .Replace(" T[] ", FromTemplate(" ({0})[] ", "T{n}", ", ", genericCount))
                .Replace("<out T>", FromTemplate("<{0}>", "out T{n}", ", ", genericCount))
                .Replace("Task<T>", FromTemplate("Task<({0})>", "T{n}", ", ", genericCount))
                .Replace("Func<T, Task>", FromTemplate("Func<{0}, Task>", "T{n}", ", ", genericCount))
                .Replace(" T, Task>", FromTemplate(" {0}, Task>", "T{n}", ", ", genericCount))
                .Replace("(T, bool", FromTemplate("({0}, bool", "T{n}", ", ", genericCount))
                .Replace("var (t, ", FromTemplate("var ({0}, ", "t{n}", ", ", genericCount))
                .Replace("var t in", FromTemplate("var ({0}) in", "t{n}", ", ", genericCount))
                .Replace(", t)", FromTemplate(", {0})", "t{n}", ", ", genericCount))
                .Replace("return (t, ", FromTemplate("return ({0}, ", "t{n}", ", ", genericCount))
                .Replace("({t})", FromTemplate("({0})", "{t{n}}", ", ", genericCount))
                .Replace("<T>", FromTemplate("<{0}>", "T{n}", ", ", genericCount))
                .Replace("{T}", FromTemplate("{{{0}}}", "T{n}", ", ", genericCount))
                .Replace("(T value)", FromTemplate("(({0}) value)", "T{n}", ", ", genericCount))
                .Replace("(T t)", FromTemplate("({0})", "T{n} t{n}", ", ", genericCount))
                .Replace("(t)", FromTemplate("({0})", "t{n}", ", ", genericCount))
                .Replace("var t =", FromTemplate("var ({0}) =", "t{n}", ", ", genericCount))
                .Replace(" t =>", FromTemplate(" ({0}) =>", "t{n}", ", ", genericCount))
                .Replace(" T ", FromTemplate(" ({0}) ", "T{n}", ", ", genericCount))
                .Replace(" t;", FromTemplate(" ({0});", "t{n}", ", ", genericCount))
                // 生成 [GeneratedCode]。
                .Replace("    public interface ", $"    {Generatedattribute}{Environment.NewLine}    public interface ")
                .Replace("    public class ", $"    {Generatedattribute}{Environment.NewLine}    public class ")
                .Replace("    public sealed class ", $"    {Generatedattribute}{Environment.NewLine}    public sealed class ");
            return GeneratedHeader + Environment.NewLine + content.Trim() + Environment.NewLine + GeneratedFooter;
        }

        private static string FromTemplate(string template, string part, string seperator, int count)
        {
            return string.Format(template,
                string.Join(seperator, Enumerable.Range(1, count).Select(x => part.Replace("{n}", x.ToString()))));
        }
    }
}
